name: build and deploy
on:
  push:
    branches:
      - release
jobs:
  job_build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -Dmaven.test.skip=true -T4
      - run: pwd && ls -lR
      #  job_deploy:
      #    needs: job_build
      #    using: "composite"
      #    steps:
      #      - name: scp
      #        uses: garygrossgarten/github-action-scp@release
      #        with:
      #          host: ${{ secrets.DEPLOY_HOST }}
      #          username: ${{ secrets.USERNAME }}
      #          password: ${{ secrets.PASSWORD }}
      #          local: ./target/myhome2-0.0.1-SNAPSHOT.jar
      #          remote: "~/APP/myhome2/"
#      - uses: marcodallasanta/ssh-scp-deploy@v1.2.0
#        with:
#          local: './target/myhome2-0.0.1-SNAPSHOT.jar'                                                  # Local file path - REQUIRED false - DEFAULT ./
#          remote: '~/APP/myhome2/'                                                 # Remote file path - REQUIRED false - DEFAULT ~/
#          host: ${{secrets.DEPLOY_HOST}}                                      # Remote server address - REQUIRED true
#          user: ${{secrets.USERNAME}}                                      # Remote server user - REQUIRED true
#          password: ${{secrets.PASSWORD}}                              # User password - REQUIRED at least one of "password" or "key"
##          ssh_options: -o StrictHostKeyChecking=no                     # A set of ssh_option separated by -o - REQUIRED false - DEFAULT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
#          scp_options: -v                                              # Flags to use during scp - REQUIRED false - DEFAULT ''
#      - name: scp
#        run: |
#          sudo apt install sshpass
#          sshpass -p ${{secrets.PASSWORD}} scp -o StrictHostKeyChecking=no ./target/myhome2-0.0.1-SNAPSHOT.jar \
#            ${{secrets.USERNAME}}@${{secrets.DEPLOY_HOST}}:~/APP/myhome2/myhome2-0.0.1-SNAPSHOT.jar.new



      - name: Delete older releases
          uses: dev-drprasad/delete-older-releases@v0.2.0
          with:
            #          repo: <owner>/<repoName> # defaults to current repo
            keep_latest: 0
          #          delete_tag_pattern: beta # defaults to ""
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: myhome2-0.0.1-SNAPSHOT.jar
          release_name: myhome2-0.0.1-SNAPSHOT.jar
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./target/myhome2-0.0.1-SNAPSHOT.jar
          asset_name: myhome2-0.0.1-SNAPSHOT.jar

      - name: ssh run
        uses: appleboy/ssh-action@v0.1.4
        env:
          PASSWORD: ${{ secrets.PASSWORD }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${PASSWORD}
          script: |
            mv ~/APP/myhome2/myhome2-0.0.1-SNAPSHOT.jar.new ~/APP/myhome2/myhome2-0.0.1-SNAPSHOT.jar
            ~/bin/supervisorctl.sh restart myhome2 


      - name: send telegram message on success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            *[Build SUCCESS]* ${{ github.repository }}

            Commit message: ${{ github.event.commits[0].message }}

            [See Changes](https://github.com/${{ github.repository }}/commit/${{github.sha}})

      - name: send telegram message on failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            *[Build FAILURE]* ${{ github.repository }}

            [See Error Log](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
